name: C/C++ Release candidate windows x64

on:
  push:
    branches:
      - rc
      - debug_win

jobs:
  build_dep:
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: mkdir in deps
      run: mkdir deps/build
    - name: dep cache
      id: cache-action
      uses: actions/cache@v3
      with:
        key: win_2.7
        path: deps/build/destdir
    - if: steps.cache-action.outputs.cache-hit != 'true'
      name: build deps if new cache
      working-directory: ./deps/build
      run: |
        cmake .. -G "Visual Studio 17 2022" -A x64
        msbuild /m ALL_BUILD.vcxproj

  build:
    runs-on: windows-2022
    needs: build_dep
    
    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/msvc-dev-cmd@v1
    - name: update submodule profiles
      working-directory: ./resources/profiles
      run: git submodule update --init
    - name: change date in version
      shell: powershell
      run: |
        copy version.inc version.date.inc
        (Get-Content version.date.inc) | Foreach-Object {$_ -replace "\+UNKNOWN", ("")} | Set-Content version.date.inc
    - name: dep cache
      id: cache-action
      uses: actions/cache@v3
      with:
        key: win_2.7
        path: deps/build/destdir
    - run: dir deps
    - run: dir deps/build
    - run: dir deps/build/destdir
    - run: dir deps/build/destdir/usr
    - run: mkdir msgfmt_bin
    - name: copy gettext
      working-directory: ./msgfmt_bin
      shell: powershell
      run: '(new-object System.Net.WebClient).DownloadFile("https://github.com/supermerill/SuperSlicer_deps/releases/download/gettext/gettext-tools-static-0.18.1.1.zip", "gettext.zip")'
    - name: unzip
      working-directory: ./msgfmt_bin
      shell: cmd
      run: '"C:/Program Files/7-Zip/7z.exe" x gettext.zip'
    - name: add msgfmt to path
      shell: powershell
      working-directory: msgfmt_bin
      run: echo "$pwd;" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - run: mkdir build
    - name: cmake
      working-directory: ./build
      run: cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="d:\a\${{ github.event.repository.name }}\${{ github.event.repository.name }}\deps\build\destdir\usr\local"
    - name: make
      working-directory: ./build
      run: msbuild /m /P:Configuration=Release INSTALL.vcxproj
    - name: make .mo
      working-directory: ./build
      run: msbuild /m /P:Configuration=Release gettext_po_to_mo.vcxproj
    - name: make .pot
      working-directory: ./build
      run: msbuild /m /P:Configuration=Release gettext_make_pot.vcxproj
    - name: create OCCT wrapper
      working-directory: ./build
      run: msbuild /m /P:Configuration=Release src\occt_wrapper\OCCTWrapper.vcxproj
    - name: copy dll
      working-directory: ./build
      run: msbuild /m /P:Configuration=Release src\slic3rDllsCopy.vcxproj
    - name: create package directory
      working-directory: ./build
      shell: powershell
      run: mkdir package
    - name: copy from release
      working-directory: ./build
      shell: powershell
      run: '(new-object System.Net.WebClient).DownloadFile("https://github.com/supermerill/SuperSlicer_deps/releases/download/1.8/Slic3r_win_build.zip", "Slic3r_win_build.zip")'
    - name: unzip
      working-directory: ./build
      shell: cmd
      run: '"C:/Program Files/7-Zip/7z.exe" x Slic3r_win_build.zip'
    - name: copy missing dll content from old release
      working-directory: ./build
      shell: cmd
      run: |
        xcopy /RCYIE Slic3r_win_build\local-settings.bat package\${{ github.event.repository.name }}_local-settings.bat
        xcopy /RCYIE Slic3r_win_build\mesa package\
    - name: copy new resources
      working-directory: ./build
      shell: cmd
      run: |
        xcopy /RCYIE ..\resources package\resources
        del /S /Q package\resources\localization\*.so
    - name: copy dll & exe
      working-directory: ./build
      shell: cmd
      run: |
        xcopy /RCYIE src\release\*.dll package\
        xcopy /RCYIE src\release\*.exe package\
        xcopy /RCYIE c:\windows\system32\VCRUNTIME140* package\
        xcopy /RCYIE c:\windows\system32\msvcp140* package\
        del package\opengl32.dll
#    - name: create zip
#      working-directory: ./build
#      shell: cmd
#      run: '"C:/Program Files/7-Zip/7z.exe" a -tzip nightly.zip *'
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rc_win64
        path: build/package/

# MSI CREATION (need files from the slic3r build, can't be its own step)
  # create_msi:
    # runs-on: windows-2022
    # needs: build

    # steps:
    # - uses: actions/checkout@v3
    # - name: Download build artifact
      # uses: actions/download-artifact@v4
      # with:
        # name: rc_win64
        # path: build/package
    - name: Check inside of 'build'
      working-directory: ./build
      run: dir
    - name: Install WiX Toolset
      run: choco install wixtoolset -y
    - name: Prepare license file for MSI
      shell: powershell
      working-directory: ./build
      run: |
        # Convert LICENSE to RTF format for WiX installer
        $licenseContent = Get-Content ..\LICENSE -Raw
        $rtfContent = "{\rtf1\ansi\deff0 {\fonttbl {\f0 Times New Roman;}}{\f0\fs20 " + $licenseContent.Replace('\', '\\').Replace("`n", "\par ") + "}}"
        $rtfContent | Out-File -FilePath "package\LICENSE.rtf" -Encoding ASCII
    - name: Harvest files for MSI
      shell: cmd
      working-directory: ./build
      run: |
        heat.exe dir package -dr INSTALLFOLDER -cg Package -gg -sreg -srd -var var.SourceDir -out files.wxs -sfrag
    - name: Generate installer version
      shell: powershell
      run: |
        $fullVersion = (Get-Content version.inc | Select-String -Pattern 'set\(SLIC3R_VERSION_FULL \"(.*?)\"\)' | ForEach-Object { $_.Matches.Groups[1].Value })
        $env:InstallerVersion = "$fullVersion" -replace '\.0', '.'
        echo "InstallerVersion=$env:InstallerVersion" >> $env:GITHUB_ENV
        $env:ReleaseSuffix = ""
        echo "ReleaseSuffix=$env:ReleaseSuffix" >> $env:GITHUB_ENV
    - name: Check version number is not empty
      shell: powershell
      run: |
        if ([string]::IsNullOrWhiteSpace($env:InstallerVersion)) {
          Write-Warning "InstallerVersion is empty or null. Setting default version to 0.0.0.0"
          $env:InstallerVersion = "0.0.0.0"
          echo "InstallerVersion=$env:InstallerVersion" >> $env:GITHUB_ENV
        }
        Write-Host "Version validation passed: $env:InstallerVersion"
    - name: Build MSI installer
      shell: cmd
      working-directory: ./build
      run: |
        set MSIFileName=${{ github.event.repository.name }}_%InstallerVersion%.msi
        candle.exe -dSourceDir="package" -dInstallerVersion="%InstallerVersion%" -dReleaseSuffix="%ReleaseSuffix%" src\winInstaller.wxs files.wxs
        light.exe -b package -ext WixUIExtension winInstaller.wixobj files.wixobj -o %MSIFileName% -sw1076
    - run: dir ./build
    - name: Upload MSI artifact
      uses: actions/upload-artifact@v4
      with:
        name: rc_${{ github.event.repository.name }}-win64.msi
        path: build/${{ github.event.repository.name }}_${{ env.InstallerVersion }}.msi

