#!/bin/bash

#
# This script can download and compile dependencies, compile SuperSlicer
# and optional build a .tgz and an appimage.
#
# Original script from SuperSlicer by supermerill https://github.com/supermerill/SuperSlicer
#
# Change log:
#
# 20 Nov 2023, wschadow, branding and minor changes
# 01 Jan 2024, wschadow, added build options
#

# Our sysctl call may be run as normal user,
# but /sbin is not always in normal users' PATH.
if [[ -f /sbin/sysctl && -x /sbin/sysctl ]]; then sysctl_bin=/sbin/sysctl
else sysctl_bin=sysctl  # If not found in sbin, hope
fi

export ROOT=`pwd`
export NCORES=`nproc`

VERSION_NUMBER=""
while getopts ":iagvh" opt; do
  case ${opt} in
    i )
        export BUILD_IMAGE="1"
        ;;
    a )
        export BUILD_APP="1"
        ;;
    g )
        export FORCE_GTK2="1"
        ;;
    v )
        export VERSION_NUMBER="-@SLIC3R_VERSION_FULL@"
        ;;
    h ) echo "Usage: ./BuildLinuxImage.sh [-g][-i][-a][-h]"
        echo "   -g: force gtk2 build"
        echo "   -i: generate .tgz and Appimage (optional)"
        echo "   -a: generate app (optional)"
        echo "   -v: with version number (optional)"
        echo "   -h: help"
        exit 0
        ;;
  esac
done

if [[ -n "$BUILD_APP" ]]
then
    echo -e "\n[7/8] Generating Linux app ..."
    # create directory and copy into it
    if [ -d "package" ]
    then
        rm -rf package/*
        rm -rf package/.* 2&>/dev/null
    else
        mkdir package
    fi
    mkdir package/bin

    # copy Resources
    cp -rf ../resources/ package/resources
    cp -f bin/@SLIC3R_APP_CMD@ package/bin/@SLIC3R_APP_CMD@
    cp -f src/OCCTWrapper.so package/bin    
    ln -rs package/bin/@SLIC3R_APP_CMD@ package/bin/@GCODEVIEWER_APP_CMD@
    # remove unneeded po from resources
    find package/resources/localization -name "*.po" -type f -delete
    find package/resources/localization -name "*.pot" -type f -delete
    find package/resources/localization -name "*.ini" -type f -delete
    find package/resources/localization -name "*.py" -type f -delete
    find package/resources/localization -name "*.md" -type f -delete
    find package/resources/localization -name "*.txt" -type f -delete
    find package/resources/localization -name "*database*" -type f -delete
    find package/resources/localization -name "Slic3r.mo" -type f -delete

    # copy occtwrapper
    cp src/OCCTWrapper.so package/bin/OCCTWrapper.so

    # create bin
    echo -e '#!/bin/bash\nDIR=$(readlink -f "$0" | xargs dirname)\nexport LD_LIBRARY_PATH="$DIR/bin"\nexec "$DIR/bin/@SLIC3R_APP_CMD@" "$@"' > package/@SLIC3R_APP_CMD@
    chmod ug+x package/@SLIC3R_APP_CMD@
    echo -e '#!/bin/bash\nDIR=$(readlink -f "$0" | xargs dirname)\nexport LD_LIBRARY_PATH="$DIR/bin"\nexec "$DIR/bin/@GCODEVIEWER_APP_CMD@" "$@"' > package/@GCODEVIEWER_APP_CMD@
    chmod ug+x package/@GCODEVIEWER_APP_CMD@
    echo -e "\n... done\n"
fi

if [[ -n "$BUILD_IMAGE" ]]
then
    echo -e "\n[8/8] Creating .tgz and Appimage for distribution ...\n"

    pushd package > /dev/null
    if [[ -z "$FORCE_GTK2" ]]
    then
       tar -czvf ../@SLIC3R_APP_KEY@${VERSION_NUMBER}-linux-x64-GTK3.tgz .  &>/dev/null
    else
       tar -czvf ../@SLIC3R_APP_KEY@${VERSION_NUMBER}-linux-x64-GTK2.tgz .  &>/dev/null
    fi

    echo "> ls package/.."
    ls -al ..
    echo "> ls package/../src"
    ls -al ../src
    echo "> ls -al ROOT(build)/bin"
    ls -al $ROOT/bin
    echo "> ls -al ROOT(build)/src"
    ls -al $ROOT/src
    chmod +x ../src/build_appimage.sh
    ../src/build_appimage.sh
    popd  > /dev/null
    if [[ -z "$FORCE_GTK2" ]]
    then
		mv package/"@SLIC3R_APP_KEY@_ubu64.AppImage" "@SLIC3R_APP_KEY@${VERSION_NUMBER}-linux-x64-GTK3.AppImage"
    else
        mv package/"@SLIC3R_APP_KEY@_ubu64.AppImage" "@SLIC3R_APP_KEY@${VERSION_NUMBER}-linux-x64-GTK2.AppImage"
    fi
    echo -e "\n... done\n"
fi
