#!/bin/bash

#
# This script builds the SuperSlicer appimage.
#
# Original script from SuperSlicer by supermerill https://github.com/supermerill/SuperSlicer
#
# Change log:
#
# 20 Nov 2023, wschadow, branding and minor changes
# 10 Mar 2024, wschadow, added options
#

export OS_NAME="macOS"
VERSION_NUMBER=""
OS_ARM_NAME="macOS-arm"
while getopts ":ixavhz" opt; do
  case ${opt} in
    i )
        export BUILD_IMAGE="1"
        ;;
    x )
        export OS_NAME="macOS-intel"
        ;;
    a )
        export OS_NAME="macOS-arm"
        ;;
    v )
        export VERSION_NUMBER="-@SLIC3R_VERSION_FULL@"
        ;;
    z )
        export INCLUDE_LIBZSTD="1"
        ;;
    h ) echo "Usage: ./BuildLinuxImage.sh [-i][-a][-h]"
        echo "   -i: generate Appimage (optional)"
        echo "   -z: embbed libzstd"
        echo "   -x: set output name for intel (optional)"
        echo "   -a: set output name for arm (optional)"
        echo "   -h: help"
        exit 0
        ;;
  esac
done

    echo -e "\n[7/8] Generating MacOS app..."
#    {
        # update Info.plist
        pushd src
        sed "s/+UNKNOWN/_$(date '+%F')/" Info.plist >Info.date.plist
        # TODO: get the version directly, or do it int he caller. that is disgutingly bad practice
        if [[ "$OS_NAME" == "$OS_ARM_NAME" ]]
        then
            sed "s/13.0/14.5/" Info.date.plist > Info.final.plist
        else
            sed "s/13.0/14.2/" Info.date.plist > Info.final.plist
        fi
        popd

        # create directory and copy into it
        if [ -d "pack" ]
        then
            rm -rf pack/*
        fi
        mkdir pack
        mkdir pack/@SLIC3R_APP_KEY@
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/_CodeSignature
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Frameworks
        mkdir pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS

        # copy Resources
        cp -Rf ../resources/ pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources
        cp pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/icons/@SLIC3R_APP_KEY@.icns \
            pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/@SLIC3R_APP_KEY@.icns
        cp src/Info.final.plist pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Info.plist
        echo -n -e 'APPL????\x0a' > PkgInfo
        cp PkgInfo pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/PkgInfo
        # remove unneeded po from resources
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.po" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.pot" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.ini" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.py" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.md" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*.txt" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "*database.mo" -type f -delete
        find pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Resources/localization -name "Slic3r.mo" -type f -delete

        # copy bin and do not let it lower case
        cp -f bin/@SLIC3R_APP_CMD@ pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        chmod u+x pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        
        echo "otool -L exefile:"
        otool -L pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        echo "END otool"
        otool -l pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        echo "END otool2"

        echo "cat pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Info.plist"
        cat pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Info.plist

        ZSDT_PATH=
        echo "libzstd:"
        echo "ls -al /opt/homebrew/opt/zstd/lib/libzstd*.dylib:"
        ls -al /opt/homebrew/opt/zstd/lib/libzstd*.dylib
        echo "ls -al /usr/local/opt/zstd/lib/libzstd*.dylib:"
        ls -al /usr/local/opt/zstd/lib/libzstd*.dylib
        echo "ls -v /usr/local/opt/zstd/lib/libzstd.1.*.dylib:"
        ls -v /usr/local/opt/zstd/lib/libzstd.1.*.dylib
        echo "ls -v /usr/local/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1:"
        ls -v /usr/local/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1
        ZSDT_PATH=$(ls -v /usr/local/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1)
        if [ -z "${ZSDT_PATH}" ]
        then
            echo "ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib:"
            ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib
            echo "ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1:"
            ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1
            # try with homebrew
            ZSDT_PATH=$(ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1)
        fi
        ZSTD_FILE=$(basename ${ZSDT_PATH})
        echo "zstd var:'"$ZSDT_PATH"' : "$ZSTD_FILE;
        echo "otool -L $ZSDT_PATH:"
        otool -L $ZSDT_PATH
        echo "vtool -show-build "$ZSDT_PATH
        vtool -show-build $ZSDT_PATH
        vtool -show-build $ZSDT_PATH | grep sdk | sed 's/.* \([0-9]\+\.[0-9]\+\) .*/\1/'
        echo "vtool -show-build slic3r"
        vtool -show-build pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
        #vtool -show-build pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@ | grep sdk | sed 's/.* \([0-9]\+\.[0-9]\+\) .*/\1/'
        vtool -show-build pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@ | grep sdk | sed 's/.*\([0-9]\+\.[0-9]\+\) .*/\1/'
        # if version different
        TEST_SDK=$(vtool -show-build $ZSDT_PATH | grep sdk)
        GOOD_OS=$(vtool -show-build pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@ | grep minos)
        GOOD_SDK=$(vtool -show-build pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@ | grep sdk)
        #copy libzstd
        if [[ -n "$INCLUDE_LIBZSTD" ]]
        then
            cp $ZSDT_PATH pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Frameworks/$ZSTD_FILE
            ZSDT_PATH=pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Frameworks/$ZSTD_FILE
            echo "version: '"$TEST_SDK"' =?= '"$GOOD_SDK"' (minos:'"$GOOD_OS"')"
            if [[ "$TEST_SDK" == "$GOOD_SDK" ]]
            then
                echo "good ver '"$TEST_SDK"' == "$GOOD_SDK
            else
                echo "bad ver '"$TEST_SDK"' <> "$GOOD_SDK
            fi
            # to be in the "bad ver"
            if [[ "$OS_NAME" == "$OS_ARM_NAME" ]]
            then
                echo "arm, no version change for now"
            else
                echo "vtool -set-build-version minos:"$GOOD_OS" sdk:"$GOOD_SDK" input/output:"$ZSDT_PATH
                echo "vtool -set-build-version macos $GOOD_OS $GOOD_SDK -replace -output $ZSDT_PATH $ZSDT_PATH"
                echo "vtool -set-build-version macos "$GOOD_OS" "$GOOD_SDK" -replace -output "$ZSDT_PATH" "$ZSDT_PATH
                # vtool -set-build-version macos $GOOD_OS $GOOD_SDK -replace -output $ZSDT_PATH $ZSDT_PATH
                vtool -set-build-version macos 14.0 14.2 -replace -output $ZSDT_PATH $ZSDT_PATH
                echo "vtool -show-build "$ZSDT_PATH
                vtool -show-build $ZSDT_PATH
            fi
            ls -al pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/Frameworks/
            if [[ -n "$ZSDT_PATH" ]]
            then
                install_name_tool -change $ZSDT_PATH @executable_path/../Frameworks/$ZSTD_FILE pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
                install_name_tool -change /opt/homebrew/opt/zstd/lib/libzstd.1.dylib @executable_path/../Frameworks/$ZSTD_FILE pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
                install_name_tool -change /usr/local/opt/zstd/lib/libzstd.1.dylib @executable_path/../Frameworks/$ZSTD_FILE pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
            fi
            echo "otool -L exefile now:"
            otool -L pack/@SLIC3R_APP_KEY@/@SLIC3R_APP_KEY@.app/Contents/MacOS/@SLIC3R_APP_KEY@
            echo "END otool"
        fi
#     } &> $ROOT/Build.log # Capture all command output
    echo -e "\n ... done\n"

DMG_NAME=@SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.dmg

if [[ -n "$BUILD_IMAGE" ]]
then
echo -e "\n[8/8] Creating .tgz and DMG Image for distribution..."
  {

    tar -czvf @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.tgz pack/@SLIC3R_APP_KEY@
    #tar -czvf @SLIC3R_APP_KEY@-@SLIC3R_VERSION_FULL@-macOS.tgz pack/@SLIC3R_APP_KEY@

    # create dmg
    hdiutil create -ov -fs HFS+ -volname "@SLIC3R_APP_KEY@" -srcfolder "pack/@SLIC3R_APP_KEY@" temp.dmg
    hdiutil convert temp.dmg -format UDZO -o $DMG_NAME
    rm -f temp.dmg
    
  } &> $ROOT/Build.log # Capture all command output

  # check if evrything went well
  if [ -e $OS_NAME ]; then
      echo -e "\n ... done\n"
  else
      # something went wrong, publish log
      echo -e "\n ... fail\n"
      ls -al
      cat $ROOT/Build.log
  fi
fi

if [[ -e $DMG_NAME ]]
then
  echo -e "\nsuccess, returning.\n"
  exit 0
else
  echo -e "\n[9/9 (bis)] Creating .tgz and DMG Image for distribution... again"
  {
    echo killing...; sudo pkill -9 XProtect >/dev/null || true;
    echo waiting...; while pgrep XProtect; do sleep 3; done;

    tar -czvf @SLIC3R_APP_KEY@${VERSION_NUMBER}-$OS_NAME.tgz pack/@SLIC3R_APP_KEY@
    #tar -czvf @SLIC3R_APP_KEY@-@SLIC3R_VERSION_FULL@-macOS.tgz pack/@SLIC3R_APP_KEY@

    # create dmg
    hdiutil create -ov -fs HFS+ -volname "@SLIC3R_APP_KEY@" -srcfolder "pack/@SLIC3R_APP_KEY@" temp.dmg
    hdiutil convert temp.dmg -format UDZO -o $DMG_NAME
    rm -f temp.dmg
  } &> $ROOT/Build.log # Capture all command output

  # check if evrything went well
  if [ -e $DMG_NAME ]; then
      echo -e "\n ... done\n"
  else
      # something went wrong, publish log
      echo -e "\n ... fail\n"
      ls -al
      cat $ROOT/Build.log
      exit 1 # terminate and indicate error
  fi
fi


# test homebrew zstd
echo "install libzstd via homebrew"
brew install zstd
echo "ls -v /opt/homebrew/opt:"
ls -v /opt/homebrew/opt/
echo "ls -v /opt/homebrew/opt/zstd:"
ls -v /opt/homebrew/opt/zstd
echo "ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib:"
ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib
# echo "ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1:"
# ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1
try with homebrew
# ZSDT_PATH=$(ls -v /opt/homebrew/opt/zstd/lib/libzstd.1.*.dylib | tail -n 1)
# echo "zstd var:'"$ZSDT_PATH"'"
# echo "otool -L $ZSDT_PATH:"
# otool -L $ZSDT_PATH
# echo "vtool -show-build "$ZSDT_PATH
# vtool -show-build $ZSDT_PATH

